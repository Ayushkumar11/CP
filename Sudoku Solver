#include<bits/stdc++.h>
using namespace std;

//You are given an N*N sudoku grid (N is a multiple of 3). Solve the sudoku and print the solution.


//Input Format
//First line contains a single integer N.
// Next N lines contains N integers each, where jth integer int ith line denotes the value at ith row and jth column in sudoku grid. 
//This value is 0, if the cell is empty.

bool can_place(int num,int mat[9][9],int i,int j){  //bool data type is used to declare a variable
	for(int k = 0;k<9;k++){                         //whose value will be set as true(1)orfalse(0)
		if(mat[i][k] == num || mat[k][j] == num){
			return false;
		}
	}
	int row =(i/3)*3;
	int col =(j/3)*3;
	for(int k=row;k<row+3;k++){
		for(int n = col;n<col+3;n++){
			if(mat[k][n] == num){
				return false;
			}
		}
	}
	return true;
}

bool solve(int mat[9][9],int i,int j){
	//Base case
	if(j == 9) return solve(mat,i+1,0);
	if(i == 9) return true;

	//recursive case
	if(mat[i][j] == 0){
		for(int num=1;num<=9;num++){
			if(can_place(num,mat,i,j)){
				mat[i][j] = num;
				bool can_solve_sudoku = solve(mat,i,j+1);
				if(can_solve_sudoku) return true;
				mat[i][j] = 0;
			}
		}
		return false;
	}
	else return solve(mat,i,j+1);
}

int main(){
	#ifndef ONLINE_JUDGE
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#endif

	int n; cin>>n;
	int mat[9][9];
	for(int i=0;i<9;i++){
		for(int j=0;j<9;j++){
			cin>>mat[i][j];
		}
	}

	//Call function solve and store the answer returned by it in a boolean type variable solved
	bool solved = solve(mat,0,0);
	//print the sudoku if solved is true else print -1

	if(solved){
		for(int i=0;i<9;i++){
			for(int j=0;j<9;j++){
				cout<<mat[i][j]<<" ";
			}cout<<endl;
		}
	}
	else cout<<"-1";

	return 0;
}
